[gd_resource type="VisualShader" load_steps=15 format=2]

[ext_resource path="res://data/shader/bayer.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeExpression" id=1]
size = Vector2( 553, 313 )
expression = "// the value 0.9375 results when comparing intensity * 16.0 > threshold * 15.0
// we just use 15.0 / 16.0 instead
ditheredColor.rgb = (pixelColor.r > threshold * 0.9375) ? color0 : color1;"

[sub_resource type="VisualShaderNodeGlobalExpression" id=2]
size = Vector2( 470, 261 )
expression = "float get_threshold(int x, int y) {
	if (x == 0) {
		if (y == 0) {
			return thresholdMap[0][0];
		} else if (y == 1) {
			return thresholdMap[0][1];
		} else if (y == 2) {
			return thresholdMap[0][2];
		} else if (y == 3) {
			return thresholdMap[0][3];
		}
	} else if (x == 1) {
		if (y == 0) {
			return thresholdMap[1][0];
		} else if (y == 1) {
			return thresholdMap[1][1];
		} else if (y == 2) {
			return thresholdMap[1][2];
		} else if (y == 3) {
			return thresholdMap[1][3];
		}
	} else if (x == 2) {
		if (y == 0) {
			return thresholdMap[2][0];
		} else if (y == 1) {
			return thresholdMap[2][1];
		} else if (y == 2) {
			return thresholdMap[2][2];
		} else if (y == 3) {
			return thresholdMap[2][3];
		}
	} else if (x == 3) {
		if (y == 0) {
			return thresholdMap[3][0];
		} else if (y == 1) {
			return thresholdMap[3][1];
		} else if (y == 2) {
			return thresholdMap[3][2];
		} else if (y == 3) {
			return thresholdMap[3][3];
		}
	}
	return 0.0;
}"

[sub_resource type="VisualShaderNodeColorUniform" id=3]
uniform_name = "ColorLight"

[sub_resource type="VisualShaderNodeColorUniform" id=4]
uniform_name = "ColorDark"

[sub_resource type="VisualShaderNodeTexture" id=5]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeVectorDecompose" id=6]

[sub_resource type="VisualShaderNodeColorFunc" id=7]

[sub_resource type="VisualShaderNodeVectorOp" id=8]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 21, 12, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "uv"

[sub_resource type="VisualShaderNodeVec3Uniform" id=10]
uniform_name = "ScreenSize"

[sub_resource type="VisualShaderNodeVectorOp" id=11]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 4, 4, 4 ) ]
operator = 3

[sub_resource type="VisualShaderNodeTexture" id=12]
source = 2

[sub_resource type="VisualShaderNodeGlobalExpression" id=13]
size = Vector2( 363, 187 )
expression = "const mat4 thresholdMap = mat4(
    vec4(0.0, 12.0, 3.0, 15.0), 
    vec4(8.0, 4.0, 11.0, 7.0), 
    vec4(2.0, 14.0, 1.0, 13.0), 
    vec4(10.0, 6.0, 9.0, 5.0)
);"

[resource]
code = "shader_type canvas_item;
uniform vec4 ColorLight : hint_color;
uniform vec4 ColorDark : hint_color;
uniform vec3 ScreenSize;
uniform sampler2D tex_frg_17;


// GlobalExpression:0
	const mat4 thresholdMap = mat4(
	    vec4(0.0, 12.0, 3.0, 15.0), 
	    vec4(8.0, 4.0, 11.0, 7.0), 
	    vec4(2.0, 14.0, 1.0, 13.0), 
	    vec4(10.0, 6.0, 9.0, 5.0)
	);
// GlobalExpression:1
	float get_threshold(int x, int y) {
		if (x == 0) {
			if (y == 0) {
				return thresholdMap[0][0];
			} else if (y == 1) {
				return thresholdMap[0][1];
			} else if (y == 2) {
				return thresholdMap[0][2];
			} else if (y == 3) {
				return thresholdMap[0][3];
			}
		} else if (x == 1) {
			if (y == 0) {
				return thresholdMap[1][0];
			} else if (y == 1) {
				return thresholdMap[1][1];
			} else if (y == 2) {
				return thresholdMap[1][2];
			} else if (y == 3) {
				return thresholdMap[1][3];
			}
		} else if (x == 2) {
			if (y == 0) {
				return thresholdMap[2][0];
			} else if (y == 1) {
				return thresholdMap[2][1];
			} else if (y == 2) {
				return thresholdMap[2][2];
			} else if (y == 3) {
				return thresholdMap[2][3];
			}
		} else if (x == 3) {
			if (y == 0) {
				return thresholdMap[3][0];
			} else if (y == 1) {
				return thresholdMap[3][1];
			} else if (y == 2) {
				return thresholdMap[3][2];
			} else if (y == 3) {
				return thresholdMap[3][3];
			}
		}
		return 0.0;
	}

void vertex() {
// Output:0

}

void fragment() {
// Texture:4
	vec3 n_out4p0;
	float n_out4p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out4p0 = _tex_read.rgb;
		n_out4p1 = _tex_read.a;
	}

// ColorFunc:22
	vec3 n_out22p0;
	{
		vec3 c = n_out4p0;
		float max1 = max(c.r, c.g);
		float max2 = max(max1, c.b);
		float max3 = max(max1, max2);
		n_out22p0 = vec3(max3, max3, max3);
	}

// ColorUniform:15
	vec3 n_out15p0 = ColorLight.rgb;
	float n_out15p1 = ColorLight.a;

// ColorUniform:16
	vec3 n_out16p0 = ColorDark.rgb;
	float n_out16p1 = ColorDark.a;

// Input:24
	vec3 n_out24p0 = vec3(UV, 0.0);

// VectorUniform:25
	vec3 n_out25p0 = ScreenSize;

// VectorOp:23
	vec3 n_out23p0 = n_out24p0 * n_out25p0;

// VectorOp:26
	vec3 n_in26p1 = vec3(4.00000, 4.00000, 4.00000);
	vec3 n_out26p0 = n_out23p0 / n_in26p1;

// Texture:17
	vec4 tex_frg_17_read = texture(tex_frg_17, n_out26p0.xy);
	vec3 n_out17p0 = tex_frg_17_read.rgb;
	float n_out17p1 = tex_frg_17_read.a;

// VectorDecompose:19
	float n_out19p0 = n_out17p0.x;
	float n_out19p1 = n_out17p0.y;
	float n_out19p2 = n_out17p0.z;

// Expression:11
	vec3 n_out11p0;
	n_out11p0 = vec3(0.0, 0.0, 0.0);
	{
		// the value 0.9375 results when comparing intensity * 16.0 > n_out19p0 * 15.0
		// we just use 15.0 / 16.0 instead
		n_out11p0.rgb = (n_out22p0.r > n_out19p0 * 0.9375) ? n_out15p0 : n_out16p0;
	}

// Output:0
	COLOR.rgb = n_out11p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -878, 144.125 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 380, 40 )
nodes/fragment/4/node = SubResource( 12 )
nodes/fragment/4/position = Vector2( -860, -40 )
nodes/fragment/9/node = SubResource( 13 )
nodes/fragment/9/position = Vector2( -800, -240 )
nodes/fragment/9/size = Vector2( 363, 187 )
nodes/fragment/9/input_ports = ""
nodes/fragment/9/output_ports = ""
nodes/fragment/9/expression = "const mat4 thresholdMap = mat4(
    vec4(0.0, 12.0, 3.0, 15.0), 
    vec4(8.0, 4.0, 11.0, 7.0), 
    vec4(2.0, 14.0, 1.0, 13.0), 
    vec4(10.0, 6.0, 9.0, 5.0)
);"
nodes/fragment/11/node = SubResource( 1 )
nodes/fragment/11/position = Vector2( -360, 40 )
nodes/fragment/11/size = Vector2( 553, 313 )
nodes/fragment/11/input_ports = "0,1,pixelColor;1,1,color0;2,1,color1;3,0,threshold;"
nodes/fragment/11/output_ports = "0,1,ditheredColor;"
nodes/fragment/11/expression = "// the value 0.9375 results when comparing intensity * 16.0 > threshold * 15.0
// we just use 15.0 / 16.0 instead
ditheredColor.rgb = (pixelColor.r > threshold * 0.9375) ? color0 : color1;"
nodes/fragment/12/node = SubResource( 2 )
nodes/fragment/12/position = Vector2( -800, -520 )
nodes/fragment/12/size = Vector2( 470, 261 )
nodes/fragment/12/input_ports = ""
nodes/fragment/12/output_ports = ""
nodes/fragment/12/expression = "float get_threshold(int x, int y) {
	if (x == 0) {
		if (y == 0) {
			return thresholdMap[0][0];
		} else if (y == 1) {
			return thresholdMap[0][1];
		} else if (y == 2) {
			return thresholdMap[0][2];
		} else if (y == 3) {
			return thresholdMap[0][3];
		}
	} else if (x == 1) {
		if (y == 0) {
			return thresholdMap[1][0];
		} else if (y == 1) {
			return thresholdMap[1][1];
		} else if (y == 2) {
			return thresholdMap[1][2];
		} else if (y == 3) {
			return thresholdMap[1][3];
		}
	} else if (x == 2) {
		if (y == 0) {
			return thresholdMap[2][0];
		} else if (y == 1) {
			return thresholdMap[2][1];
		} else if (y == 2) {
			return thresholdMap[2][2];
		} else if (y == 3) {
			return thresholdMap[2][3];
		}
	} else if (x == 3) {
		if (y == 0) {
			return thresholdMap[3][0];
		} else if (y == 1) {
			return thresholdMap[3][1];
		} else if (y == 2) {
			return thresholdMap[3][2];
		} else if (y == 3) {
			return thresholdMap[3][3];
		}
	}
	return 0.0;
}"
nodes/fragment/15/node = SubResource( 3 )
nodes/fragment/15/position = Vector2( -860, 100 )
nodes/fragment/16/node = SubResource( 4 )
nodes/fragment/16/position = Vector2( -860, 220 )
nodes/fragment/17/node = SubResource( 5 )
nodes/fragment/17/position = Vector2( -860, 340 )
nodes/fragment/19/node = SubResource( 6 )
nodes/fragment/19/position = Vector2( -640, 300 )
nodes/fragment/22/node = SubResource( 7 )
nodes/fragment/22/position = Vector2( -640, -40 )
nodes/fragment/23/node = SubResource( 8 )
nodes/fragment/23/position = Vector2( -1220, 340 )
nodes/fragment/24/node = SubResource( 9 )
nodes/fragment/24/position = Vector2( -1400, 340 )
nodes/fragment/25/node = SubResource( 10 )
nodes/fragment/25/position = Vector2( -1400, 420 )
nodes/fragment/26/node = SubResource( 11 )
nodes/fragment/26/position = Vector2( -1040, 340 )
nodes/fragment/connections = PoolIntArray( 11, 0, 0, 0, 17, 0, 19, 0, 15, 0, 11, 1, 16, 0, 11, 2, 19, 0, 11, 3, 4, 0, 22, 0, 22, 0, 11, 0, 24, 0, 23, 0, 25, 0, 23, 1, 23, 0, 26, 0, 26, 0, 17, 0 )
